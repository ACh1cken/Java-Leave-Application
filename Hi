AddApplication.java 

import java.awt.Color;
import java.awt.event.ActionEvent;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class AddApplicationFrame extends BaseWorkFrame{	
	private JLabel reasonLabel;
	private JLabel fromDateLabel;
	private JLabel toDateLabel;
	private JTextField reasonValue;
	private JTextField fromDateValue;
	private JTextField toDateValue;
	private JButton Log InButton;
	private JButton resetButton;
	private JLabel msgLabel;
	
	@Override
	public void init() {
		reasonLabel = new JLabel("Detail:");
		reasonLabel.setFont(textFont);
		reasonLabel.setSize(150, 30);
		reasonLabel.setLocation(100, 60);
		fromDateLabel = new JLabel("StartDate:");
		fromDateLabel.setFont(textFont);
		fromDateLabel.setSize(150, 30);
		fromDateLabel.setLocation(100, 100);
		
toDateLabel = new JLabel("EndDate:");
		toDateLabel.setFont(textFont);
		toDateLabel.setSize(150, 30);
		toDateLabel.setLocation(100, 140);
		reasonValue = new JTextField();
		reasonValue.setFont(textFont);
		reasonValue.setSize(200, 30);
		reasonValue.setLocation(270, 60);
		
		fromDateValue = new JTextField();
		fromDateValue.setFont(textFont);
		fromDateValue.setSize(200, 30);
		fromDateValue.setLocation(270, 100);
		
		toDateValue = new JTextField();
		toDateValue.setFont(textFont);
		toDateValue.setSize(200, 30);
		toDateValue.setLocation(270, 140);
		
		Log InButton = new JButton("Log In");
		Log InButton.setFont(textFont);
		Log InButton.setSize(200, 30);
		Log InButton.setLocation(100, 220);
		
		resetButton = new JButton("Reset");
		resetButton.setFont(textFont);
		resetButton.setSize(200, 30);
		resetButton.setLocation(270, 220);
		
		msgLabel =  new JLabel();
		msgLabel.setFont(textFont);
		msgLabel.setSize(400, 30);
		msgLabel.setLocation(100, 270);
		msgLabel.setForeground(Color.YELLOW);
		
		this.panel.add(reasonLabel);
		this.panel.add(fromDateLabel);
		this.panel.add(toDateLabel);
		this.panel.add(reasonValue);
		this.panel.add(fromDateValue);
		this.panel.add(toDateValue);
		this.panel.add(Log InButton);
		this.panel.add(resetButton);
		this.panel.add(msgLabel);
		
		Log InButton.addActionListener(this);
		resetButton.addActionListener(this);
	}
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		if(arg0.getSource() == this.Log InButton){
			addApplication();
			return;
		}else if(arg0.getSource() == this.resetButton){
			reset();
			return;
		}
		CommanAction.actionPerformed(this, this.newApplicationMenuItem, (JMenuItem)arg0.getSource());
	}
	private boolean addApplication(){
		msgLabel.setText("");
		if(StringUtil.isBlank(reasonValue.getText())){
			msgLabel.setText("Details can not be empty!");
			return false;
		}
		if(StringUtil.isBlank(fromDateValue.getText())){
			msgLabel.setText("StartDate can not be empty!");
			return false;
		}
		if(StringUtil.isBlank(toDateValue.getText())){
			msgLabel.setText("EndDate can not be empty!");
			return false;
		}
		LeaveApplication application = new LeaveApplication();
		application.setReason(reasonValue.getText().trim());
		application.setFromDate(fromDateValue.getText().trim());
		application.setToDate(toDateValue.getText().trim());
		application.setCreateTime(DateUtil.getDateStr());
		application.setProposerId(UserLoginHandler.getLoginStaff().getId());
		application.setStatus(ApplicationStatus.PROCESSING);
		
		boolean success = DataCenter.addLeaveApplication(application);
		if(success){
			JOptionPane.showMessageDialog(null,"You have been successfully logged in!!!");
		}else{
			JOptionPane.showMessageDialog(null,"Failed to log in into Leave Application");
		}
		return success;
	}
	
	private void reset(){
		reasonValue.setText("");
		fromDateValue.setText("");
		toDateValue.setText("");
		msgLabel.setText("");
	}
	
}

â€ƒ

UserLoginHandler.java

public class UserLoginHandler {
	private static Staff LOGIN_STAFF ;

	public static boolean login(String username,String password){
		Staff staff = DataCenter.getStaffByUsername(username);
		if(null == staff){
			return false;
		}
		if(null == password ||  !password.equals(staff.getPassword())){
			return false;
		}
		if(staff.isDeleted()){
			return false;
		}
		LOGIN_STAFF = staff;
		return true;		
	}
	public static Staff getLoginStaff(){
		return LOGIN_STAFF;
	}
	public static boolean logout(){
		LOGIN_STAFF = null;
		return true;
	}
}


AddStaffFrame.java

public class UserLoginHandler {
	private static Staff LOGIN_STAFF ;
	public static boolean login(String username,String password){
		Staff staff = DataCenter.getStaffByUsername(username);
		if(null == staff){
			return false;
		}
		if(null == password ||  !password.equals(staff.getPassword())){
			return false;
		}
		if(staff.isDeleted()){
			return false;
		}
		LOGIN_STAFF = staff;
		return true;}
	public static Staff getLoginStaff(){
		return LOGIN_STAFF;
	}
	
	
	public static boolean logout(){
		LOGIN_STAFF = null;
		return true;}}

ApplicatoinStatus.java
public enum ApplicationStatus {
	SUCCESS,
	FAILED,
	PROCESSING
}

ApprovalProcess.java

public class ApprovalProcess {
	private String id;
	private String applicationId;
	private String supervisorId;
	private Status status;
	private String createTime;
	private String mark;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getApplicationId() {
		return applicationId;
	}
	public void setApplicationId(String applicationId) {
		this.applicationId = applicationId;
	}
	public Status getStatus() {
		return status;
	}
	public void setStatus(Status status) {
		this.status = status;
	}
	public String getCreateTime() {
		return createTime;
	}
	public void setCreateTime(String createTime) {
		this.createTime = createTime;
	}
	public String getMark() {
		return mark;
	}
	public void setMark(String mark) {
		this.mark = mark;
	}
	public String getSupervisorId() {
		return supervisorId;
	}
	public void setsupervisorId(String supervisorId) {
		this.supervisorId = supervisorId;
	}}

ApprovalProcessFrame.java

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JCheckBox;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

public class ApprovalProcessFrame extends BaseWorkFrame  {
	private JScrollPane scrollPanel;
	private JPanel opPanel;
	private JLabel selectIdLabel;
	private JLabel selectIdText;
	private ButtonGroup processButton ;
	private JLabel remarkLabel;
	private JTextField remarkText;
	private JCheckBox endorse;
	private JCheckBox decline;
	private JTable table;
	private DefaultTableModel tmd;
	@Override
	public void actionPerformed(ActionEvent arg0) {
		CommanAction.actionPerformed(this, this.approvalProcessMenuItem, (JMenuItem)arg0.getSource());
	}

	@Override
	public void init() {
		this.scrollPanel = new JScrollPane();
		this.opPanel = new JPanel();
		this.opPanel.setLayout(new GridLayout(1,7));
		this.panel.setLayout(new BorderLayout());
		this.panel.add(this.scrollPanel, BorderLayout.CENTER);
		this.panel.add(this.opPanel,BorderLayout.SOUTH);
	
		String[][] rowdata  = getData();
		String[] attribute = { "Id","staff", "Detail", "StartDate", "EndDate","CreateTime"};
		
		tmd = new DefaultTableModel(rowdata, attribute);
		this.table = new JTable(tmd);
		this.table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		this.scrollPanel.setViewportView(this.table);
		
		this.table.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				int selectedRow = table.getSelectedRow(); 
				Object oa = tmd.getValueAt(selectedRow, 0);
				selectIdText.setText(oa.toString()); 
				endorse.setSelected(true);
				remarkText.setText("");
			}
		});
			
		endorse =  new JCheckBox("Approve");
		decline =  new JCheckBox("Denied");		
		processButton = new ButtonGroup();
		processButton.add(endorse);
		processButton.add(decline);
		
		this.selectIdLabel = new JLabel("Selected ID:");
		this.selectIdText = new JLabel();
		this.remarkLabel  = new JLabel("Remark");
		this.remarkText = new JTextField();
		this.opPanel.add(this.selectIdLabel);
		this.opPanel.add(this.selectIdText);
		this.opPanel.add(this.endorse);
		this.opPanel.add(this.decline);
		this.opPanel.add(this.remarkLabel);
		this.opPanel.add(this.remarkText);
		
		final JButton Log InButton = new JButton("Log In");
		Log InButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						int selectedRow = table.getSelectedRow();
						if (selectedRow != -1) 
						{
							Log In(selectedRow);
						}else{					JOptionPane.showMessageDialog(null,"Please select at least one Leave Application!");
						}
					}
				});
		this.opPanel.add(Log InButton);
	}

	private void Log In(int selectedRow){
		Staff staff = UserLoginHandler.getLoginStaff();
		List<ApprovalProcess> list = DataCenter.getApprovalProcessBySupervisorId(staff.getId());
		for(ApprovalProcess p:list){
			if(p.getApplicationId().equals(selectIdText.getText())){
				p.setCreateTime(DateUtil.getDateStr());
				if(this.endorse.isSelected()){
					p.setStatus(Status.ENDORSE);
				}else{
					p.setStatus(Status.DECLINE);
				}
				p.setMark(this.remarkText.getText().trim());
				if(DataCenter.processApproval(p)){
					tmd.removeRow(selectedRow); 
				}
				return;}}}
	
	private String[][]  getData(){
		Staff staff = UserLoginHandler.getLoginStaff();
		List<ApprovalProcess> list = DataCenter.getApprovalProcessBySupervisorId(staff.getId());
		
		String[][] rowdata  = null;
		if(null == list || list.isEmpty()){
			rowdata = new String[1][6];
		}else{
			rowdata = new String[list.size()][6];
			String[] singleRowdata = null;
			int index =0 ;
			for(ApprovalProcess process:list){
				LeaveApplication application = DataCenter.getApplicationById(process.getApplicationId());
				if(null == application){
					continue;
				}
				singleRowdata = new String[6] ;
				singleRowdata[0] = application.getId();
				Staff leaveStaff = DataCenter.getStaffById(application.getProposerId());
				if(null != leaveStaff){
					singleRowdata[1] = leaveStaff.getUsername();
				}
				singleRowdata[2] = application.getReason();
				singleRowdata[3] = application.getFromDate();
				singleRowdata[4] = application.getToDate();
				singleRowdata[5] = application.getCreateTime();
				rowdata[index ++] = singleRowdata;
			}
		}
		return rowdata;}}


CommanAction.java

import javax.swing.JMenuItem;

public class CommanAction {
	public static void actionPerformed(BaseWorkFrame frame, JMenuItem localMenu, JMenuItem clickMenu) {
		if(localMenu == clickMenu){
			return;
		}			
		boolean changed = false;
		if (clickMenu == frame.logoutMenuItem) {
			if (UserLoginHandler.logout()) {
				new LoginFrame();
				changed = true;
			}
		} else if (clickMenu == frame.pcenterMenuItem) {
			new PcenterFrame();
			changed = true;
		} else if (clickMenu == frame.myApplicationMenuItem) {
			new MyApplicationFrame();
			changed = true;
		} else if (clickMenu == frame.approvalProcessMenuItem) {
			new ApprovalProcessFrame();
			changed = true;
		}else if (clickMenu == frame.newStaffMenuItem) {
			new AddStaffFrame();
			changed = true;
		}else if (clickMenu == frame.newApplicationMenuItem) {
			new AddApplicationFrame();
			changed = true;
		}else if (clickMenu == frame.staffListMenuItem) {
			new StaffListFrame();
			changed = true;
		}
		
		if(changed){
			frame.setVisible(false);
		}}}

DataCenter.java

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class DataCenter {
	private final static Map<String,Staff> idStaffMap = new HashMap<String,Staff>();
	private final static Map<String,Staff> usernameStaffMap = new HashMap<String,Staff>();
	private final static Map<String,List<Staff>> supervisorStaffMap =  new HashMap<String,List<Staff>>();
	
	private final static Map<String,LeaveApplication> idApplicationMap = new HashMap<String,LeaveApplication>();
	
	private final static Map<String,List<LeaveApplication>> proposerIdApplicationMap = new HashMap<String,List<LeaveApplication>>();
	
	private final static Map<String,ApprovalProcess> idProcessMap = new HashMap<String,ApprovalProcess>();

	private final static Map<String,List<ApprovalProcess>> applicationIdProcessMap = new HashMap<String,List<ApprovalProcess>>();

	private final static Map<String,List<ApprovalProcess>> supervisorIdProcessMap = new HashMap<String,List<ApprovalProcess>>();

	public static Staff getStaffById(String id){
		return idStaffMap.get(id);
	}
	public static Staff getStaffByUsername(String username){
		return usernameStaffMap.get(username);
	}
	public static List<Staff> getStaffBySupervisorId(String supervisorId){
		return supervisorStaffMap.get(supervisorId);
	}
	public static LeaveApplication getApplicationById(String id){
		return idApplicationMap.get(id);
	}
	public static List<LeaveApplication> getApplicationByProposerId(String proposerId){
		return proposerIdApplicationMap.get(proposerId);
	}
	public static ApprovalProcess getApprovalProcessById(String id){
		return idProcessMap.get(id);
	}
	public static List<ApprovalProcess> getApprovalProcessByApplicationId(String applicationId){
		return applicationIdProcessMap.get(applicationId);
	}
	public static List<ApprovalProcess> getApprovalProcessBySupervisorId(String supervisorId){
		return supervisorIdProcessMap.get(supervisorId);
	}
	static{
		Staff staff = null;	
		String directorId = null;
		String staff1Id = null;
		staff = new Staff();
		staff.setUsername("admin");
		staff.setPassword("admin");
		staff.setRealname("director");
		staff.setRole(Role.DIRECTOR);
		addStaff(staff);
		directorId = staff.getId();
		
		staff = new Staff();
		staff.setUsername("staff");
		staff.setPassword("staff");
		staff.setRealname("Oliver");
		staff.setRole(Role.STAFF);
		staff.setsupervisorId(directorId);
		addStaff(staff);
		staff1Id = staff.getId();}
	public static List<Staff> getAllStaff(){
		List<Staff> list =  new ArrayList<Staff>(idStaffMap.values());
		List<Staff> normalStaffList = new  ArrayList<Staff>();
		for(Staff staff:list){
			if(!staff.isDeleted()){
				normalStaffList.add(staff);
			}
		}
		return normalStaffList;} 
	
	public static boolean addStaff(Staff staff){
		if(null == staff ||StringUtil.isBlank(staff.getUsername()) || StringUtil.isBlank(staff.getPassword())){
			return false;
		}
		if(null == staff.getsupervisorId() && staff.getRole() != Role.DIRECTOR){
			return false;
		}
		staff.setId(IdGenerator.getGenerateId(IdType.ST.name()));
		if(idStaffMap.containsKey(staff.getId()) || usernameStaffMap.containsKey(staff.getUsername())){
			return false;
		}		
		
		boolean hasLoop = false;
		Staff supervisor = getStaffById(staff.getsupervisorId());
		Set<String> supervisorIds = new HashSet<String>();
		
		while(null != supervisor && null != supervisor.getsupervisorId()){
			if(supervisorIds.contains(supervisor.getId())){
				hasLoop = true;
				break;
			}
			supervisorIds.add(supervisor.getId());
			supervisor = getStaffById(supervisor.getsupervisorId());
		}
		if(hasLoop){
			return false;
		}
		
		idStaffMap.put(staff.getId(), staff);
		usernameStaffMap.put(staff.getUsername(), staff);
		List<Staff> staffs = supervisorStaffMap.get(staff.getsupervisorId());
		if(null == staffs){
			staffs = new ArrayList<Staff>();
			supervisorStaffMap.put(staff.getsupervisorId(), staffs);
		}
		staffs.add(staff);
		
		return true;
	}
	public static boolean deleteStaff(String id){
		if(StringUtil.isBlank(id)){
			return false;
		}	
		Staff staff = idStaffMap.get(id);
		if(null == staff || staff.isDeleted()){
			return false;
		}	
		List<Staff> subordinates = supervisorStaffMap.get(id);
		if(null != subordinates){
			for(Staff subordinate:subordinates){
				subordinate.setsupervisorId(staff.getsupervisorId());
			}}

		List<ApprovalProcess> processes = supervisorIdProcessMap.get(staff.getId());
		List<ApprovalProcess> supervisorProcesses = supervisorIdProcessMap.get(staff.getsupervisorId());
		if(null == supervisorProcesses ){
			supervisorProcesses = new ArrayList<ApprovalProcess>();
			supervisorIdProcessMap.put(staff.getsupervisorId(), supervisorProcesses);
		}
		if(null != processes && !processes.isEmpty()){
			for(ApprovalProcess process: processes){
				if(process.getStatus() == Status.UNPROCESSED){
					process.setsupervisorId(staff.getsupervisorId());
					supervisorProcesses.add(process);
				}}}
		staff.setDeleted(true);
		return true;
	}
	
	public static boolean addLeaveApplication(LeaveApplication application){
		if(null == application){
			return false;
		}
		application.setId(IdGenerator.getGenerateId(IdType.LA.name()));
		idApplicationMap.put(application.getId(), application);
		List<LeaveApplication> proposerApplications =  proposerIdApplicationMap.get(application.getProposerId());
		if(null == proposerApplications){
			proposerApplications = new ArrayList<LeaveApplication>();
			proposerIdApplicationMap.put(application.getProposerId(), proposerApplications);}
		proposerApplications.add(application);
		ApprovalProcess process = new ApprovalProcess();
		process.setId(IdGenerator.getGenerateId(IdType.AP.name()));
		process.setApplicationId(application.getId());
		process.setsupervisorId(idStaffMap.get(application.getProposerId()).getsupervisorId());
		addApprovalProcess(process);
		return true;
	}
	
	public static boolean processApproval(ApprovalProcess process){
		Staff staff = idStaffMap.get(process.getSupervisorId());
		LeaveApplication application = idApplicationMap.get(process.getApplicationId());
		supervisorIdProcessMap.remove(process.getSupervisorId());
		if(process.getStatus() == Status.ENDORSE && staff.getRole() == Role.DIRECTOR){
			application.setStatus(ApplicationStatus.SUCCESS);
		}else if(process.getStatus() == Status.DECLINE ){
			application.setStatus(ApplicationStatus.FAILED);
		}else{
			ApprovalProcess nextProcess = new ApprovalProcess();
			nextProcess.setId(IdGenerator.getGenerateId(IdType.AP.name()));
			nextProcess.setApplicationId(process.getApplicationId());
			nextProcess.setsupervisorId(idStaffMap.get(process.getSupervisorId()).getsupervisorId());
			
			addApprovalProcess(nextProcess);
		}		
		return true}
	
	public static boolean addApprovalProcess(ApprovalProcess process){
		if(StringUtil.isBlank(process.getId())||StringUtil.isBlank(process.getApplicationId()) || StringUtil.isBlank(process.getSupervisorId())){
			return false;}
		idProcessMap.put(process.getId(), process);	
		List<ApprovalProcess> processes = new ArrayList<ApprovalProcess>();
		processes.add(process);
		applicationIdProcessMap.put(process.getApplicationId(), processes);
		List<ApprovalProcess> supervisorProcesses = new ArrayList<ApprovalProcess>();
		supervisorProcesses.add(process);
		supervisorIdProcessMap.put(process.getSupervisorId(), processes);
		return true;}}







DateUtil.java

import java.text.SimpleDateFormat;
import java.util.Date;

public class DateUtil {
	public static String getDateStr(){
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = new Date();
		return df.format(date);}}

idType.java

public enum IdType {
	ST,
	LA,
	AP
}

idGenerator.java

import java.util.Random;
public class IdGenerator {
	public static String getGenerateId(String prefix){
		long currentTime = System.currentTimeMillis();
		int random = (int)Math.pow(10, 8) -1;
		try {
			random = getNdigitalRandom(8);
		} catch (Exception e) {
		}
		
		return prefix+currentTime+random;
		
	}
	
	public static int getNdigitalRandom(int n) throws Exception{
		if(n < 0 || n > 9){
			throw new Exception("getNdigitalRandom method the parameter n must between 1 and 9.");
		}
		int maxNum = (int)Math.pow(10, n);
		int num = new Random().nextInt(maxNum);
		if(num < Math.pow(10, n-1)){
			num = maxNum - num;
		}
		return num;
	}
	
	public static void main(String[] args) throws Exception{
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getNdigitalRandom(1));
		System.out.println(getGenerateId("AP"));		
		System.out.println(getGenerateId("AP"));
		System.out.println(getGenerateId("AP"));
		System.out.println(getGenerateId("AP"));
	}}

LeaveApplication.java

public class LeaveApplication {
	private String id;
	private String proposerId;
	private String reason;
	private String fromDate;
	private String toDate;
	private String createTime;
	private ApplicationStatus status;
	private boolean repeal;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getProposerId() {
		return proposerId;
	}
	public void setProposerId(String proposerId) {
		this.proposerId = proposerId;
	}
	public String getReason() {
		return reason;
	}
	public void setReason(String reason) {
		this.reason = reason;
	}

	public String getFromDate() {
		return fromDate;
	}
	public void setFromDate(String fromDate) {
		this.fromDate = fromDate;
	}
	public String getToDate() {
		return toDate;
	}
	public void setToDate(String toDate) {
		this.toDate = toDate;
	}
	public String getCreateTime() {
		return createTime;
	}
	public void setCreateTime(String createTime) {
		this.createTime = createTime;
	}
	
	public ApplicationStatus getStatus() {
		return status;
	}
	public void setStatus(ApplicationStatus status) {
		this.status = status;
	}
	public boolean isRepeal() {
		return repeal;
	}
	public void setRepeal(boolean repeal) {
		this.repeal = repeal;
	}
			
}
â€ƒ
MyApplicationFrame.java

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class MyApplicationFrame extends BaseWorkFrame {

	private JScrollPane scrollPanel;
	@Override
	public void actionPerformed(ActionEvent arg0) {
		CommanAction.actionPerformed(this, this.myApplicationMenuItem, (JMenuItem)arg0.getSource());
	}

	@Override
	public void init() {
		this.scrollPanel = new JScrollPane();
		this.panel.setLayout(new BorderLayout());
		this.panel.add(this.scrollPanel,BorderLayout.CENTER);
		
		Staff staff = UserLoginHandler.getLoginStaff();
		List<LeaveApplication> list = DataCenter.getApplicationByProposerId(staff.getId());
		
		String[][] rowdata  = null;
		if(null == list || list.isEmpty()){
			rowdata = new String[1][6];
		}else{
			rowdata = new String[list.size()][6];
			String[] singleRowdata = null;
			int index =0 ;
			for(LeaveApplication application:list){
				singleRowdata = new String[6] ;
				singleRowdata[0] = application.getId();
				singleRowdata[1] = application.getReason();
				singleRowdata[2] = application.getFromDate();
				singleRowdata[3] = application.getToDate();
				singleRowdata[4] = application.getCreateTime();
				if( null != application.getStatus()){
					singleRowdata[5] = application.getStatus().name();
				}
				rowdata[index ++] = singleRowdata;}}
		
		String[] attribute = { "Id", "Detail", "StartDate", "EndDate","CreateTime","Status"};
		DefaultTableModel tmd = new DefaultTableModel(rowdata, attribute);
		JTable table = new JTable(tmd);
		this.scrollPanel.setViewportView(table);}}

PcenterFrame.java

import java.awt.event.ActionEvent;
import javax.swing.JLabel;
import javax.swing.JMenuItem;

public class PcenterFrame extends BaseWorkFrame{	
	private JLabel idLabel;
	private JLabel unameLabel;
	private JLabel pwdLabel;
	private JLabel realnameLabel;
	private JLabel supervisorLabel;
	private JLabel idValue;
	private JLabel unameValue;
	private JLabel pwdValue;
	private JLabel realnameValue;
	private JLabel supervisorValue;
	
	@Override
	public void init() {
		idLabel = new JLabel("ID :");
		idLabel.setFont(textFont);
		idLabel.setSize(150, 30);
		idLabel.setLocation(100, 20);
		
		unameLabel = new JLabel("UserName:");
		unameLabel.setFont(textFont);
		unameLabel.setSize(150, 30);
		unameLabel.setLocation(100, 60);
		
		pwdLabel = new JLabel("Password:");
		pwdLabel.setFont(textFont);
		pwdLabel.setSize(150, 30);
		pwdLabel.setLocation(100, 100);
		
		realnameLabel = new JLabel("RealName:");
		realnameLabel.setFont(textFont);
		realnameLabel.setSize(150, 30);
		realnameLabel.setLocation(100, 140);
		
		supervisorLabel = new JLabel("Supervisor:");
		supervisorLabel.setFont(textFont);
		supervisorLabel.setSize(150, 30);
		supervisorLabel.setLocation(100, 180);
		
		idValue = new JLabel();
		idValue.setFont(textFont);
		idValue.setSize(200, 30);
		idValue.setLocation(270, 20);
		
		unameValue = new JLabel();
		unameValue.setFont(textFont);
		unameValue.setSize(200, 30);
		unameValue.setLocation(270, 60);
		
		pwdValue = new JLabel();
		pwdValue.setFont(textFont);
		pwdValue.setSize(200, 30);
		pwdValue.setLocation(270, 100);
		
		realnameValue = new JLabel();
		realnameValue.setFont(textFont);
		realnameValue.setSize(200, 30);
		realnameValue.setLocation(270, 140);
		
		supervisorValue = new JLabel();
		supervisorValue.setFont(textFont);
		supervisorValue.setSize(200, 30);
		supervisorValue.setLocation(270, 180);
		
		this.panel.add(idLabel);
		this.panel.add(unameLabel);
		this.panel.add(pwdLabel);
		this.panel.add(realnameLabel);
		this.panel.add(supervisorLabel);
		this.panel.add(idValue);
		this.panel.add(unameValue);
		this.panel.add(pwdValue);
		this.panel.add(realnameValue);
		this.panel.add(supervisorValue);
		
		Staff staff = UserLoginHandler.getLoginStaff();
		if(null != staff){
			idValue.setText(staff.getId());
			unameValue.setText(staff.getUsername());
			realnameValue.setText(staff.getRealname());
			supervisorValue.setText(staff.getsupervisorId());
		}
	}
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		CommanAction.actionPerformed(this, this.pcenterMenuItem, (JMenuItem)arg0.getSource());
	}
}

Staff.java

import java.util.Date;

public class Staff {
	private String id;
	private String username;
	private String password;
	private String realname;
	private String teleNo;
	private Date birthday;
	private String supervisorId;
	private Role role;
	private boolean deleted = false;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getRealname() {
		return realname;
	}
	public void setRealname(String realname) {
		this.realname = realname;
	}
	public String getTeleNo() {
		return teleNo;
	}
	public void setTeleNo(String teleNo) {
		this.teleNo = teleNo;
	}
	public Date getBirthday() {
		return birthday;
	}
	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}
	public String getsupervisorId() {
		return supervisorId;
	}
	public void setsupervisorId(String supervisorId) {
		this.supervisorId = supervisorId;
	}
	public Role getRole() {
		return role;
	}
	public void setRole(Role role) {
		this.role = role;
	}
	public boolean isDeleted() {
		return deleted;
	}
	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}}

StaffListFrame.java

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

public class StaffListFrame extends BaseWorkFrame {
	private JScrollPane scrollPanel;
	private JPanel opPanel;
	private JLabel selectIdLabel;
	private JLabel selectIdText;
	private JTable table;
	private DefaultTableModel tmd;

	@Override
	public void actionPerformed(ActionEvent arg0) {
		CommanAction.actionPerformed(this, this.staffListMenuItem,
				(JMenuItem) arg0.getSource());
	}

	@Override
	public void init() {
		this.scrollPanel = new JScrollPane();
		this.opPanel = new JPanel();
		this.opPanel.setLayout(new GridLayout(1,3));
		this.panel.setLayout(new BorderLayout());
		this.panel.add(this.scrollPanel, BorderLayout.CENTER);
		this.panel.add(this.opPanel,BorderLayout.SOUTH);

		String[][] rowdata = getData();
		String[] attribute = new String[] { "Id", "Username", "Realname", "Role", "Supervisior" };
		tmd = new DefaultTableModel(rowdata, attribute);
		this.table = new JTable(tmd);
		this.table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		this.scrollPanel.setViewportView(this.table);

		this.table.addMouseListener(new MouseAdapter() {
					public void mouseClicked(MouseEvent e) {
						int selectedRow = table.getSelectedRow(); 
						Object oa = tmd.getValueAt(selectedRow, 0);
						selectIdText.setText(oa.toString()); 
					}});

		this.selectIdLabel = new JLabel("Selected ID:");
		this.selectIdText = new JLabel();
		this.opPanel.add(this.selectIdLabel);
		this.opPanel.add(this.selectIdText);
		
		final JButton delButton = new JButton("Delete");
		delButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						int selectedRow = table.getSelectedRow();
						if (selectedRow != -1)
						{
							delStaff(selectedRow);
						}else{
				JOptionPane.showMessageDialog(null,"Please select at least one staff!");
						}}});
this.opPanel.add(delButton);
	}

	private void delStaff(int selectedRow){
		String staffId = selectIdText.getText();
		
		if(StringUtil.isNotBlank(staffId)){
			Staff staff = DataCenter.getStaffById(staffId);
			if(null == staff ){
				return;
			}
			
			if(Role.DIRECTOR == staff.getRole()){
				JOptionPane.showMessageDialog(null,"Can not delete Admin!");
				return;
			}
			if(DataCenter.deleteStaff(staffId)){
				tmd.removeRow(selectedRow);
			}else{
				JOptionPane.showMessageDialog(null,"Failed to delete user!!!");
			}
		}else{
			JOptionPane.showMessageDialog(null,"Please select at least one staff!");
		}
	}
	
	
	private String[][] getData() {
		List<Staff> list = DataCenter.getAllStaff();

		String[][] rowdata = null;
		if (null == list || list.isEmpty()) {
			rowdata = new String[1][5];
		} else {
			rowdata = new String[list.size()][5];
			String[] singleRowdata = null;
			int index = 0;
			for (Staff staff : list) {
				singleRowdata = new String[5];
				singleRowdata[0] = staff.getId();
				singleRowdata[1] = staff.getUsername();
				singleRowdata[2] = staff.getRealname();
				singleRowdata[3] = staff.getRole().name();
				Staff supervisor = DataCenter.getStaffById(staff
						.getsupervisorId());
				if (null != supervisor) {
					singleRowdata[4] = supervisor.getUsername();
				}

				rowdata[index++] = singleRowdata;
			}
		}
		return rowdata;}}


StringUtil.java

public class StringUtil {
	
	public static boolean isBlank(String str){
		if(null == str){
			return true;
		}
		
		if("".equals(str.trim())){
			return true;
		}
		
		return false;
	}
	
	
	public static boolean isNotBlank(String str){
		return !isBlank(str);
	}
}

Role.java

public enum Role {
	STAFF,
	DIRECTOR
}

â€ƒ
Status.java


public enum Status {
	ENDORSE,
	DECLINE,
	UNPROCESSED
}

BaseWorkFrame.java

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;

public abstract class BaseWorkFrame extends JFrame implements ActionListener{
	JMenuBar menuBar ;
	JMenu pcenterMenu ;		
	JMenu applicationMenu ;	
	JMenuItem pcenterMenuItem;
	JMenuItem staffListMenuItem;
	JMenuItem myApplicationMenuItem;
	JMenuItem approvalProcessMenuItem;
	JMenuItem newApplicationMenuItem;
	JMenuItem newStaffMenuItem;
	JMenuItem logoutMenuItem;
	Font textFont ;
	JPanel panel;
	public abstract void init();
	public BaseWorkFrame() {
		Staff staff = UserLoginHandler.getLoginStaff();
		if(null == staff){
			this.setVisible(false);
			new LoginFrame();
			return;
		}
		
		this.textFont = new Font("Arial Black",Font.SERIF PLAIN,20);
		
		panel=(JPanel)this.getContentPane();	
		panel.setLayout(null);
		
		String welcome = "Leave Application System";
		
		menuBar = new JMenuBar();
		pcenterMenu = new JMenu("User Session");
		pcenterMenu.setFont(textFont);
		
		applicationMenu = new JMenu("Application");
		applicationMenu.setFont(textFont);
		
		
		pcenterMenuItem = new JMenuItem("Personal Info");
		staffListMenuItem = new JMenuItem("Staff List");
		newStaffMenuItem = new JMenuItem("New Staff");
		logoutMenuItem = new JMenuItem("Logout");
		myApplicationMenuItem  = new JMenuItem("My Application");
		approvalProcessMenuItem = new JMenuItem("Approval Process");
		newApplicationMenuItem = new JMenuItem("New Application");

		menuBar.add(pcenterMenu);
		menuBar.add(applicationMenu);
		
		pcenterMenu.add(pcenterMenuItem);
		if(staff.getRole() == Role.DIRECTOR){
			pcenterMenu.add(newStaffMenuItem);
			pcenterMenu.add(staffListMenuItem);
			applicationMenu.add(approvalProcessMenuItem);
		}else{
			applicationMenu.add(myApplicationMenuItem);
			applicationMenu.add(newApplicationMenuItem);
		}
		
		pcenterMenu.add(logoutMenuItem);		
		this.pcenterMenuItem.addActionListener(this);
		this.newStaffMenuItem.addActionListener(this);
		this.logoutMenuItem.addActionListener(this);
		this.myApplicationMenuItem.addActionListener(this);
		this.approvalProcessMenuItem.addActionListener(this);
		this.newApplicationMenuItem.addActionListener(this);	
		this.staffListMenuItem.addActionListener(this);

		
		this.setTitle(welcome);
		this.setJMenuBar(menuBar);
		
		this.setSize(800, 600);

		Toolkit kit = Toolkit.getDefaultToolkit(); 
		Dimension screenSize = kit.getScreenSize(); 
		int screenWidth = screenSize.width / 2; 
		int screenHeight = screenSize.height / 2; 
		int height = this.getHeight();
		int width = this.getWidth();
		this.setLocation(screenWidth - width / 2, screenHeight - height / 2);
		
		this.setVisible(true);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		init();
	}
}

LoginFrame.java

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

public class LoginFrame extends JFrame implements ActionListener {
	private JLabel  titleLabel ;
	private JLabel  usernameLabel;
	private JLabel passwordLabel ;	
	private JTextField usernameText;
	private JPasswordField passwordText;
	private JButton Log InButton;
	private JButton resetButton;
	private JLabel msgLabel;
	private JCheckBox showPassword;
	public LoginFrame(){
		super();
		init();
		setTitle("Login Page");
	}
	
	private void init(){
		JPanel panel=(JPanel)this.getContentPane();
		Font titleFont = new Font("Arial",Font.BOLD,28);
		Font checkbox = new Font("Arial",Font.SERIF PLAIN,15);
		Font textFont = new Font("Arial",Font.SERIF PLAIN,22);
		
		this.titleLabel = new JLabel("Leave Application System");
		this.titleLabel.setFont(titleFont);
		this.titleLabel.setForeground(Color.GREY);
		this.titleLabel.setSize(300, 150);
		this.titleLabel.setLocation(300, 30);
		
		this.usernameLabel = new JLabel("UserName:");
		this.usernameLabel.setFont(textFont);
		this.usernameLabel.setSize(100, 50);
		this.usernameLabel.setLocation(150, 150);
		
		this.passwordLabel = new JLabel("Password:");
		this.passwordLabel.setFont(textFont);
		this.passwordLabel.setSize(100, 50);
		this.passwordLabel.setLocation(150, 220);
		
		this.usernameText = new JTextField();
		this.usernameText.setFont(textFont);
		this.usernameText.setSize(300, 50);
		this.usernameText.setLocation(300, 150);
		
		this.passwordText = new JPasswordField();
		this.passwordText.setFont(textFont);
		this.passwordText.setSize(300, 50);
		this.passwordText.setLocation(300, 220);
		
		this.Log InButton = new JButton("Login");
		this.Log InButton.setFont(textFont);
		this.Log InButton.setSize(100, 50);
		this.Log InButton.setLocation(200, 330);
		this.Log InButton.addActionListener(this);
		
		this.resetButton = new JButton("Reset");
		this.resetButton.setFont(textFont);
		this.resetButton.setSize(100, 50);
		this.resetButton.setLocation(400, 330);
		this.resetButton.addActionListener(this);
		
		this.showPassword = new JCheckBox("Show Password");
		this.showPassword.setFont(checkbox);
		this.showPassword.setSize(150,50);
		this.showPassword.setLocation(300,270);
		this.showPassword.addActionListener(this);
		
		this.msgLabel = new JLabel();
		this.msgLabel.setFont(textFont);
		this.msgLabel.setSize(400, 50);
		this.msgLabel.setLocation(150, 400);
		
		panel.setLayout(null);
		panel.add(this.titleLabel);
		panel.add(this.usernameLabel);
		panel.add(this.passwordLabel);
		panel.add(this.usernameText);
		panel.add(this.passwordText);
		panel.add(this.Log InButton);
		panel.add(this.resetButton);
		panel.add(this.msgLabel);
		panel.add(this.showPassword);
		
	    this.setSize(800,600);

		Toolkit kit = Toolkit.getDefaultToolkit();  
	    Dimension screenSize = kit.getScreenSize(); 
	    int screenWidth = screenSize.width/2;   
	    int screenHeight = screenSize.height/2;  
	    int height = this.getHeight();
	    int width = this.getWidth();
	    this.setLocation(screenWidth-width/2, screenHeight-height/2);
	    this.setVisible(true);
	    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		if(arg0.getSource() == this.Log InButton){
			login();
		}else if(arg0.getSource() == this.resetButton){
			reset();
		}
		else if (arg0.getSource() == showPassword) {
            if (showPassword.isSelected()) {
                passwordText.setEchoChar((char) 0);
            } else {
                passwordText.setEchoChar('*');
            }}}
	
	
	@SuppressWarnings("deprecation")
	private void login(){
		this.msgLabel.setText("");
		boolean success = UserLoginHandler.login(this.usernameText.getText().trim(), this.passwordText.getText());
		if(success){
			this.setVisible(false);
			new PcenterFrame();
		}else{
			this.msgLabel.setText("username or password is incorrect!!!");
			this.msgLabel.setForeground(Color.YELLOW);
		}}
	private void reset(){
		this.msgLabel.setText("");
		this.usernameText.setText("");
		this.passwordText.setText("");
	}
	public static void main(String[] args){
		new LoginFrame();}}
